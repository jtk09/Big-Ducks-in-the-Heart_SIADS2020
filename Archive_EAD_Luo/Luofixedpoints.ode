#
# Luofixedpoints.ode
#
# XPP ODE file for the vector field: Luofixedpoints
#
# This file was generated by the program VFGEN, version: 2.5.0
# Generated on  7-Feb-2019 at 21:07
#
number Ki=145
number Nao=140
number Nai=18
number PRNaK=0.01833
number R=8314.4598
number Kelvin=304.5
number Faraday=95484.56
number cda=0.095
number cdb=0.07
number cfa=0.012
number cfb=0.0065
number cxa=5.0E-4
number cxb=0.0013
number cxi=2.837
number cK1a=1.02
number cK1b=0.49124
number Vda=-5.0
number Vdb=44.0
number Vfa=28.0
number Vfb=30.0
number Vxa=50.0
number Vxb=20.0
number Vxi1=77.0
number Vxi2=35.0
number sda1=-0.01
number sda2=-0.072
number sdb1=-0.017
number sdb2=0.05
number sfa1=-0.008
number sfa2=0.15
number sfb1=-0.02
number sfb2=-0.2
number sxa1=0.083
number sxa2=0.057
number sxb1=-0.06
number sxb2=-0.04
number sxi=0.04
number sK1a=0.2385
number sK1b1=0.08032
number sK1b2=0.06175
number sK1b3=-0.5143
number sKp=0.16722408026755852842
number gK1w=0.6047
number gKp=0.0183
number gb=0.03921
number VKp=7.488
number Vb=59.87
#
par C=1.0
par Ko=5.4
par gKw=0.282
par gCa=0.09
par VCa=80.0
par alpha=1.0
par beta=1.0
par gamma=1.0
#
gK=(0.43033148291193520945)*sqrt(Ko)*gKw
gK1=(0.43033148291193520945)*sqrt(Ko)*gK1w
VK=Faraday^(-1)*log((PRNaK*Nao+Ko)*(Ki+PRNaK*Nai)^(-1))*R*Kelvin
VK1=Faraday^(-1)*R*log(Ki^(-1)*Ko)*Kelvin
alphad=exp((Vda+V)*sda1)*(1+exp(sda2*(Vda+V)))^(-1)*cda
betad=(1+exp(sdb2*(Vdb+V)))^(-1)*exp(sdb1*(Vdb+V))*cdb
taud=(alphad+betad)^(-1)*alpha
dinf=alphad*(alphad+betad)^(-1)
alphaf=cfa*exp(sfa1*(V+Vfa))*(1+exp(sfa2*(V+Vfa)))^(-1)
betaf=cfb*(1+exp(sfb2*(Vfb+V)))^(-1)*exp(sfb1*(Vfb+V))
tauf=(betaf+alphaf)^(-1)*beta
finf=(betaf+alphaf)^(-1)*alphaf
alphax=(1+exp((Vxa+V)*sxa2))^(-1)*cxa*exp((Vxa+V)*sxa1)
betax=(1+exp((Vxb+V)*sxb2))^(-1)*exp((Vxb+V)*sxb1)*cxb
taux=(betax+alphax)^(-1)*gamma
xinf=(betax+alphax)^(-1)*alphax
xi=cxi*(Vxi1+V)^(-1)*exp(sxi*(Vxi2+V))^(-1)*(-1+exp((Vxi1+V)*sxi))
alphaK1=(1+exp(-(59.215+VK1-V)*sK1a))^(-1)*cK1a
betaK1=(cK1b*exp(-(-5.476+VK1-V)*sK1b1)+exp(-(594.31+VK1-V)*sK1b2))*(1+exp(-(-4.753+VK1-V)*sK1b3))^(-1)
K1inf=(alphaK1+betaK1)^(-1)*alphaK1
Kp=(1+exp(sKp*(VKp-V)))^(-1)
ICa=-gCa*d*f*(VCa-V)
IK=-gK*xi*(VK-V)*x
IK1=-K1inf*(VK1-V)*gK1
IKp=-(VK1-V)*Kp*gKp
Ib=gb*(Vb+V)
#
# The vector field and initial conditions
#
V'=-C^(-1)*(Ib+IK+IK1+IKp+ICa)
init V=-84.00921358691151
d'=-taud^(-1)*C^(-1)*(d-dinf)
init d=0.003115892215502387
f'=-tauf^(-1)*(f-finf)
init f=0.9999792435437288
x'=-taux^(-1)*(x-xinf)
init x=0.005949492611873008
#
@ maxstor=10000001, bounds=10000000, xp=x, yp=V, xlo=0, xhi=1, ylo=-90, yhi=50, total=10000, 
@ dt=0.01, nmesh=1000, jac_eps=0.000001, newt_tol=0.000001, newt_iter=1000, bell=0,
@ toler=0.000001, meth=stiff
#
done
