#
# Luofixedpoints.ode
#
# XPP ODE file for the vector field: Luofixedpoints
#
# This file was generated by the program VFGEN, version: 2.5.0
# Generated on 11-Jan-2019 at 15:29
#
number Ki=145
number Nao=140
number Nai=18
number PRNaK=0.01833
number R=8314.4598
number Kelvin=304.5
number Faraday=95484.56
number cda=0.095
number cdb=0.07
number cfa=0.012
number cfb=0.0065
number cxa=5.0E-4
number cxb=0.0013
number cxi=2.837
number cK1a=1.02
number cK1b=0.49124
number Vda=-5.0
number Vdb=44.0
number Vfa=28.0
number Vfb=30.0
number Vxa=50.0
number Vxb=20.0
number Vxi1=77.0
number Vxi2=35.0
number sda1=-0.01
number sda2=-0.072
number sdb1=-0.017
number sdb2=0.05
number sfa1=-0.008
number sfa2=0.15
number sfb1=-0.02
number sfb2=-0.2
number sxa1=0.083
number sxa2=0.057
number sxb1=-0.06
number sxb2=-0.04
number sxi=0.04
number sK1a=0.2385
number sK1b1=0.08032
number sK1b2=0.06175
number sK1b3=-0.5143
number sKp=0.16722408026755852842
number gK1w=0.6047
number gKp=0.0183
number gb=0.03921
number VKp=7.488
number Vb=59.87
#
par C=1.0
par Ko=5.4
par gKw=0.282
par gCa=0.09
par VCa=80.0
par alpha=1.0
par beta=1.0
par gamma=1.0
#
gK=(0.43033148291193520945)*sqrt(Ko)*gKw
gK1=(0.43033148291193520945)*sqrt(Ko)*gK1w
VK=Faraday^(-1)*log((PRNaK*Nao+Ko)*(Ki+PRNaK*Nai)^(-1))*R*Kelvin
VK1=Faraday^(-1)*R*log(Ki^(-1)*Ko)*Kelvin
alphad=exp((Vda+V)*sda1)*(1+exp(sda2*(Vda+V)))^(-1)*cda
betad=(1+exp(sdb2*(Vdb+V)))^(-1)*exp(sdb1*(Vdb+V))*cdb
taud=alpha*(betad+alphad)^(-1)
dinf=alphad*(betad+alphad)^(-1)
alphaf=cfa*exp(sfa1*(V+Vfa))*(1+exp(sfa2*(V+Vfa)))^(-1)
betaf=cfb*(1+exp(sfb2*(Vfb+V)))^(-1)*exp(sfb1*(Vfb+V))
tauf=(alphaf+betaf)^(-1)*beta
finf=alphaf*(alphaf+betaf)^(-1)
alphax=(1+exp((Vxa+V)*sxa2))^(-1)*cxa*exp((Vxa+V)*sxa1)
betax=(1+exp((Vxb+V)*sxb2))^(-1)*exp((Vxb+V)*sxb1)*cxb
taux=gamma*(alphax+betax)^(-1)
xinf=alphax*(alphax+betax)^(-1)
xi=cxi*(Vxi1+V)^(-1)*exp(sxi*(Vxi2+V))^(-1)*(-1+exp((Vxi1+V)*sxi))
alphaK1=(1+exp(-sK1a*(59.215+VK1-V)))^(-1)*cK1a
betaK1=(1+exp(-(-4.753+VK1-V)*sK1b3))^(-1)*(exp(-sK1b2*(594.31+VK1-V))+cK1b*exp(-sK1b1*(-5.476+VK1-V)))
K1inf=alphaK1*(betaK1+alphaK1)^(-1)
Kp=(1+exp(sKp*(VKp-V)))^(-1)
IK=-x*(VK-V)*gK*xi
IK1=-(VK1-V)*K1inf*gK1
IKp=-(VK1-V)*gKp*Kp
Ib=gb*(Vb+V)
f=gCa^(-1)*(Ib+IK+IK1+IKp)*(VCa-V)^(-1)*dinf^(-1)
ICa=-gCa*f*(VCa-V)*dinf
dinfalpha=(1+exp(-sda2*(Vda+V)))^(-1)
dalphad=-(dinfalpha*sda2-sda1)*alphad
dinfbeta=(1+exp(-sdb2*(Vdb+V)))^(-1)
dbetad=-betad*(dinfbeta*sdb2-sdb1)
ddinfdV=taud*(dalphad-(dbetad+dalphad)*dinf)
dxidV=-(xi-cxi*exp(sxi*(Vxi2+V))^(-1)*sxi)*(Vxi1+V)^(-1)
dalphaK1=(-1+cK1a^(-1)*alphaK1)*alphaK1*sK1a
K1infbeta=(1+exp((-4.753+VK1-V)*sK1b3))^(-1)
dbetaK1=-betaK1*K1infbeta*sK1b3+(exp(-sK1b2*(594.31+VK1-V))*sK1b2+cK1b*sK1b1*exp(-sK1b1*(-5.476+VK1-V)))*(1+exp(-(-4.753+VK1-V)*sK1b3))^(-1)
dK1dV=-((dbetaK1+dalphaK1)*K1inf-dalphaK1)*(betaK1+alphaK1)^(-1)
dKpdV=-sKp*Kp*(-1+Kp)
dfdt=tauf^(-1)*(finf-f)
dxdt=-(x-xinf)*taux^(-1)
dFdV=-K1inf*gK1-gb+(VK1-V)*dKpdV*gKp+(VK1-V)*gK1*dK1dV-gCa*f*dinf-gKp*Kp+gCa*ddinfdV*f*(VCa-V)+x*(VK-V)*gK*dxidV-x*gK*xi
dFdf=gCa*(VCa-V)*dinf
dFdx=(VK-V)*gK*xi
#
# The vector field and initial conditions
#
V'=dFdx*dxdt+dFdf*dfdt
init V=-17.2935478391032
x'=-dFdV*dxdt
init x=-0.02188053436302558
#
@ maxstor=1000000, xp=x, yp=V, xlo=0, xhi=1, ylo=-90, yhi=50, total=3000, dt=0.5
@ nmesh=1000, jac_eps=0.000001, newt_tol=0.000001, newt_iter=1000
done
